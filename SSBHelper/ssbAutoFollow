#!/usr/bin/python3 -u
import asyncio
import os
import sys
from threading import Thread

class SsbAutoFollow(asyncio.DatagramProtocol):
    def __init__(self):
        super().__init__()

    def connection_made(self, transport):
        self.transport = transport
        print("UDP Connection available")

    def datagram_received(self, data, addr):

        # VERY Inefficient way to make sure the ssb-server runs on the current network
        result = os.system("node bin.js version")
        if result != 0:
            print("Update ssb-server IP")
            res = os.system("sudo systemctl restart ssb-server")
            print("(Re)started ssb-server, result: " + str(res))

        tries = 0
        while result != 0 and tries < 10:
            tries = tries+1
            result = os.system("node bin.js version")

        # Here is where you would push message to whatever methods/classes you want.
        data = data.decode()
        userId = "@"+str(data).split(":")[3].split(";")[0]+".ed25519"
        path = os.path.abspath("followed.db")
        try:
            with open(path, mode="r+", encoding="utf-8") as followed:
                follow_list = followed.read().split("\n")

                if userId not in follow_list:
                    self.follow(followed, userId)

        except IOError:
            with open(path, mode="w", encoding="utf-8") as followed:
                self.follow(followed, userId)

    def follow(self, file, userId):
        result = os.system("node bin.js publish --type contact --contact " + userId + " --following")
        if result == 0:
            print("Followed user" + userId)
            file.write(userId+"\n")

PORT = 8008
# Create UDP event loop (get existing loop, we run UDP server on the main thread)
loop = asyncio.get_event_loop()
t = loop.create_datagram_endpoint(SsbAutoFollow, reuse_port=True, local_addr=('0.0.0.0', PORT))
loop.run_until_complete(t) # Server starts listening
loop.run_forever()
